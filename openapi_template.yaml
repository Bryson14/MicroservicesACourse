openapi: 3.0.3
info:
  title: Coffee Shop - OpenAPI 3.0
  description: |-
    This is the best coffee shop in the world, as featured on the hit movie, ELF.
    
    - [coffee shop repository](https://github.com/Bryson14/MicroservicesACourse)
  contact:
    email: joshua.haddad@ge.com
    url: https://github.com/Bryson14/MicroservicesACourse
  version: 1.0.11
paths:
  /orders:
    get:
      summary: Returns a list of all orders
      description: Gets all the orders that are currently open
      responses:
        '200':
          description: A JSON array of order objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  schema:
                  $ref: '#/components/schemas/Order'
  /order:
    post:
      summary: Add a new order
      description: Place a new unique order onto the queue
      responses:
        '200':
          description: The order object of the newly created order
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Bad request message
          content:
            application/json:
              schema:
                type: string
                example: Bad request due to duplicate information or whatever
  /order/{id}:
    get:
      summary: Returns a given order id as json
      parameters:
        - in: path
          name: id
          description: The id associated with an order
          required: true
          schema:
            type: integer
          example: 10
      responses:
        '200':
          description: A JSON representation of a single order given by the id
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order ID not found
          content:
            application/json:
              schema:
                type: string
                example: Order ID not found
    delete:
      summary: Cancels an order
      description: Canceles an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: Order ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid order ID, please try again.
        '200':
          description: Order cancelled successfully.
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        orderItems:
          type: array
          items:
            type: object
            schema: 
            $ref: '#/components/schemas/Item'
        createdTimestamp:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - delivered
        customerName:
          type: string
          description: The name of the customer ordering
          example: Huzaifah Shamim
      xml:
        name: order
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        Name:
          type: string
          example: "Best Latte Ever"
        Price:
          type: number
          format: float
      xml:
        name: order
