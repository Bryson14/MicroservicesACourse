openapi: 3.0.3
info:
  title: Coffee Shop - OpenAPI 3.0
  description: |-
    This is the best coffee shop in the world, as featured on the hit movie, ELF.

    - [coffee shop repository](https://github.com/Bryson14/MicroservicesACourse)
  contact:
    email: joshua.haddad@ge.com
    url: https://github.com/Bryson14/MicroservicesACourse
  version: 1.0.11
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server. Our head barista.
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing. Our trainee
paths:
  /orders:
    get:
      summary: Returns a list of all orders
      description: Gets all the orders that are currently open
      parameters:
        - in: query
          name: customerName
          required: false
          schema:
            type: string
          description: The name of the customer to filter the result by
      responses:
        "200":
          description: A JSON array of order objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  schema:
                  $ref: "#/components/schemas/Order"
  /order:
    post:
      summary: Add a new order
      description: Place a new unique order onto the queue
      responses:
        "200":
          description: The order object of the newly created order
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Bad request message
          content:
            application/json:
              schema:
                type: string
                example: Bad request due to duplicate information or whatever
  /order/{id}:
    get:
      summary: Returns a given order id as json
      parameters:
        - in: path
          name: id
          description: The id associated with an order
          required: true
          schema:
            type: integer
          example: 10
      responses:
        "200":
          description: A JSON representation of a single order given by the id
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order ID not found
          content:
            application/json:
              schema:
                type: string
                example: Order ID not found
    delete:
      summary: Cancels an order
      description: Canceles an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: Order ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid order ID, please try again.
          content:
            application/json:
              schema:
                type: string
                example: Bad request
        "200":
          description: Order cancelled successfully.
    patch:
      summary: Update an existing order
      description: Update an existing order
      operationId: pathOrder
      parameters:
        - name: id
          in: path
          description: Id associated with order
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: Order updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "405":
          description: Validation exception
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        orderItems:
          type: array
          items:
            type: object
            schema:
            $ref: "#/components/schemas/Item"
        createdTimestamp:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: placed
          enum:
            - placed
            - delivered
        customerName:
          type: string
          description: The name of the customer ordering
          example: Huzaifah Shamim
        discount:
          type: number
          format: float
          example: 2.00
      xml:
        name: order
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10.99
        Name:
          type: string
          example: "Best Latte Ever"
        Price:
          type: number
          format: float
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        Name:
          type: string
          example: "Bryson Meiling"
        birthday:
          type: string
          format: date
          example: 12-26
        rewardPoints:
          type: integer
          format: int32
          example: 5030

      xml:
        name: order
