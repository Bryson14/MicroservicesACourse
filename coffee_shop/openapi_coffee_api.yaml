openapi: 3.0.3
info:
  title: Coffee Shop - OpenAPI 3.0
  description: |-
    This is the best coffee shop in the world, as featured on the hit movie, ELF.

    - [Coffee shop repository](https://github.com/Bryson14/MicroservicesACourse)
  contact:
    email: joshua.haddad@ge.com
  version: 1.0.11
paths:
  /orders:
    get:
      summary: Returns a list of all orders
      description: Gets all the orders that are currently open
      parameters:
        - in: query
          name: customerName
          schema:
            type: string
          description: The name of the customer to filter the result by
      responses:
        "200":
          description: A JSON array of order objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  schema:
                  $ref: "#/components/schemas/Order"
  /order:
    post:
      summary: Add a new order
      description: Place a new unique order onto the queue
      requestBody:
        description: A new order object without time/uid fields of an order
        required: true
        content:
          application/json:
            schema:
              type: object
              schema:
              $ref: "#/components/schemas/NewOrder"
          
      responses:
        "200":
          description: The order object of the newly created order
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Bad request due to not having required fields for the order, trying to insert an insert an invalid item, or other misformatting errors.
          content:
            application/json:
              schema:
                type: string
                example: "Required Order items not provided"
  /order/{uid}:
    get:
      summary: Returns a given order uid as json
      parameters:
        - in: path
          name: uid
          description: The uid associated with an order
          required: true
          schema:
            type: integer
          example: 10
      responses:
        "200":
          description: A JSON representation of a single order given by the uid
          content:
            application/json:
              schema:
                type: object
                schema:
                $ref: "#/components/schemas/Order"
        "406":
          description: Order uid not found
          content:
            application/json:
              schema:
                type: string
                example: No order with this uid found
    delete:
      summary: Cancels an order
      description: Cancels an order
      operationId: deleteOrder
      parameters:
        - name: uid
          in: path
          description: Order uid to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "406":
          description: Invalid order uid
          content:
            application/json:
              schema:
                type: string
                example: No order with this uid found
        "200":
          description: Order Deleted
          content:
            application/json:
              schema:
                type: string
                example: Order Deleted
  /order/{uid}/{status}:
    patch:
      summary: Update an existing order
      description: Update an existing order's status or add a single item to the order.
      operationId: patchOrder
      parameters:
        - name: uid
          in: path
          description: Unique id associated with order
          required: true
          schema:
            type: integer
            format: int64
            example: 10
        - name: status
          in: path
          description: Change order status
          required: true
          schema:
            type: string
            example: "delivered"
      requestBody:
        description: Json of item to add
        content:
          application/json:
            schema:
              type: object
              schema:
              $ref: "#/components/schemas/Item"
      responses:
        "200":
          description: Order updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
                example: Order Updated
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Invalid format of status or order item to add
          content:
            application/json:
              schema:
                type: string
                example: Invalid status update please choose 'placed' or 'delivered'
        "406":
          description: Order with uid provided not found
          content:
            application/json:
              schema:
                type: string
                example: No order with this uid found
components:
  schemas:
    Order:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        orderItems:
          type: array
          items:
            type: object
            schema:
            $ref: "#/components/schemas/Item"
        createdTimestamp:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: placed
          enum:
            - placed
            - delivered
        customerName:
          type: string
          description: The name of the customer ordering
          example: Huzaifah Shamim
        discount:
          type: number
          format: float
          example: 2.00
      xml:
        name: order
    Item:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10.99
        name:
          type: string
          example: "Best Latte Ever"
        price:
          type: number
          format: float
      xml:
        name: item
    NewOrder:
      type: object
      properties:
        orderItems:
          type: array
          items:
            type: object
            schema:
            $ref: "#/components/schemas/Item"
        status:
          type: string
          description: Order Status
          example: placed
          enum:
            - placed
            - delivered
        customerName:
          type: string
          description: The name of the customer ordering
          example: Huzaifah Shamim
        discount:
          type: number
          format: float
          example: 2.00
      xml:
        name: new_order
    Customer:
      type: object
      properties:
        uid:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Bryson Meiling"
        birthday:
          type: string
          format: date
          example: 12-26
        rewardPoints:
          type: integer
          format: int32
          example: 5030

      xml:
        name: customer
