openapi: 3.0.3
info:
  contact:
    email: joshua.haddad@ge.com
    url: https://github.com/Bryson14/MicroservicesACourse
  description: |-
    This is the best coffee shop in the world, as featured on the hit movie, ELF.

    - [coffee shop repository](https://github.com/Bryson14/MicroservicesACourse)
  title: Coffee Shop - OpenAPI 3.0
  version: 1.0.11
servers:
- description: "Optional server description, e.g. Main (production) server. Our head\
    \ barista."
  url: http://api.example.com/v1
- description: "Optional server description, e.g. Internal staging server for testing.\
    \ Our trainee"
  url: http://staging-api.example.com
paths:
  /order:
    post:
      description: Place a new unique order onto the queue
      operationId: order_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The order object of the newly created order
        "401":
          content:
            application/json:
              schema:
                example: Bad request due to duplicate information or whatever
                type: string
          description: Bad request message
      summary: Add a new order
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /order/{id}:
    delete:
      description: Canceles an order
      operationId: delete_order
      parameters:
      - description: Order ID to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                example: Bad request
                type: string
          description: "Invalid order ID, please try again."
        "200":
          description: Order cancelled successfully.
      summary: Cancels an order
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      operationId: order_id_get
      parameters:
      - description: The id associated with an order
        example: 10
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: A JSON representation of a single order given by the id
        "404":
          content:
            application/json:
              schema:
                example: Order ID not found
                type: string
          description: Order ID not found
      summary: Returns a given order id as json
      x-openapi-router-controller: openapi_server.controllers.default_controller
    patch:
      description: Update an existing order
      operationId: path_order
      parameters:
      - description: Id associated with order
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 10
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: Order updated
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "405":
          description: Validation exception
      summary: Update an existing order
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /orders:
    get:
      description: Gets all the orders that are currently open
      operationId: orders_get
      parameters:
      - description: The name of the customer to filter the result by
        explode: true
        in: query
        name: customerName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: A JSON array of order objects
      summary: Returns a list of all orders
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  schemas:
    Order:
      example:
        createdTimestamp: 2000-01-23T04:56:07.000+00:00
        discount: 2.0
        id: 10
        orderItems:
        - Price: 6.0274563
          id: 0
          Name: Best Latte Ever
        - Price: 6.0274563
          id: 0
          Name: Best Latte Ever
        customerName: Huzaifah Shamim
        status: placed
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        orderItems:
          items:
            $ref: '#/components/schemas/Item'
          title: orderItems
          type: array
        createdTimestamp:
          format: date-time
          title: createdTimestamp
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - delivered
          example: placed
          title: status
          type: string
        customerName:
          description: The name of the customer ordering
          example: Huzaifah Shamim
          title: customerName
          type: string
        discount:
          example: 2.0
          format: float
          title: discount
          type: number
      title: Order
      type: object
      xml:
        name: order
    Item:
      example:
        Price: 6.0274563
        id: 0
        Name: Best Latte Ever
      properties:
        id:
          format: int64
          title: id
          type: integer
        Name:
          example: Best Latte Ever
          title: Name
          type: string
        Price:
          format: float
          title: Price
          type: number
      title: Item
      type: object
      xml:
        name: order
    Customer:
      properties:
        id:
          example: 10
          format: int64
          type: integer
        Name:
          example: Bryson Meiling
          type: string
        birthday:
          format: date
          type: string
        rewardPoints:
          example: 5030
          format: int32
          type: integer
      type: object
      xml:
        name: order
