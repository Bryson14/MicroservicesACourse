openapi: 3.0.3
info:
  contact:
    email: joshua.haddad@ge.com
  description: |-
    This is the best coffee shop in the world, as featured on the hit movie, ELF.

    - [Coffee shop repository](https://github.com/Bryson14/MicroservicesACourse)
  title: Coffee Shop - OpenAPI 3.0
  version: 1.0.11
servers:
- url: /
paths:
  /order:
    post:
      description: Place a new unique order onto the queue
      operationId: order_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
        description: A new order object without time/uid fields of an order
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The order object of the newly created order
        "401":
          content:
            application/json:
              schema:
                example: Invalid item to add
                type: string
          description: "Bad request due to not having required fields for the order,\
            \ trying to insert an insert an invalid item, or other misformatting errors."
      summary: Add a new order
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /order/{uid}:
    delete:
      description: Cancels an order
      operationId: delete_order
      parameters:
      - description: Order uid to delete
        explode: false
        in: path
        name: uid
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "406":
          content:
            application/json:
              schema:
                example: No order with this uid found
                type: string
          description: Invalid order uid
        "200":
          content:
            application/json:
              schema:
                example: Order Deleted
                type: string
          description: Order Deleted
      summary: Cancels an order
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      operationId: order_uid_get
      parameters:
      - description: The uid associated with an order
        example: 10
        explode: false
        in: path
        name: uid
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: A JSON representation of a single order given by the uid
        "406":
          content:
            application/json:
              schema:
                example: No order with this uid found
                type: string
          description: Order uid not found
      summary: Returns a given order uid as json
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /order/{uid}/{status}:
    patch:
      description: Update an existing order's status or add a single item to the order.
      operationId: patch_order
      parameters:
      - description: Unique id associated with order
        explode: false
        in: path
        name: uid
        required: true
        schema:
          example: 10
          format: int64
          type: integer
        style: simple
      - description: Change order status
        explode: false
        in: path
        name: status
        required: true
        schema:
          example: delivered
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: Json of item to add
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: Order updated
        "401":
          content:
            application/json:
              schema:
                example: Invalid status update please choose 'placed' or 'delivered'
                type: string
          description: Invalid format of status or order item to add
        "406":
          content:
            application/json:
              schema:
                example: No order with this uid found
                type: string
          description: Order with uid provided not found
      summary: Update an existing order
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /orders:
    get:
      description: Gets all the orders that are currently open
      operationId: orders_get
      parameters:
      - description: The name of the customer to filter the result by
        explode: true
        in: query
        name: customerName
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: A JSON array of order objects
      summary: Returns a list of all orders
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  schemas:
    Order:
      example:
        uid: 10
        createdTimestamp: 2000-01-23T04:56:07.000+00:00
        discount: 2.0
        orderItems:
        - uid: 0
          price: 6.0274563
          name: Best Latte Ever
        - uid: 0
          price: 6.0274563
          name: Best Latte Ever
        customerName: Huzaifah Shamim
        status: placed
      properties:
        uid:
          example: 10
          format: int64
          title: uid
          type: integer
        orderItems:
          items:
            $ref: '#/components/schemas/Item'
          title: orderItems
          type: array
        createdTimestamp:
          format: date-time
          title: createdTimestamp
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - delivered
          example: placed
          title: status
          type: string
        customerName:
          description: The name of the customer ordering
          example: Huzaifah Shamim
          title: customerName
          type: string
        discount:
          example: 2.0
          format: float
          title: discount
          type: number
      title: Order
      type: object
      xml:
        name: order
    Item:
      example:
        uid: 0
        price: 6.0274563
        name: Best Latte Ever
      properties:
        uid:
          format: int64
          title: uid
          type: integer
        name:
          example: Best Latte Ever
          title: name
          type: string
        price:
          format: float
          title: price
          type: number
      title: Item
      type: object
      xml:
        name: item
    NewOrder:
      example:
        discount: 2.0
        orderItems:
        - uid: 0
          price: 6.0274563
          name: Best Latte Ever
        - uid: 0
          price: 6.0274563
          name: Best Latte Ever
        customerName: Huzaifah Shamim
        status: placed
      properties:
        orderItems:
          items:
            $ref: '#/components/schemas/Item'
          title: orderItems
          type: array
        status:
          description: Order Status
          enum:
          - placed
          - delivered
          example: placed
          title: status
          type: string
        customerName:
          description: The name of the customer ordering
          example: Huzaifah Shamim
          title: customerName
          type: string
        discount:
          example: 2.0
          format: float
          title: discount
          type: number
      title: NewOrder
      type: object
      xml:
        name: new_order
    Customer:
      properties:
        uid:
          example: 10
          format: int64
          type: integer
        name:
          example: Bryson Meiling
          type: string
        birthday:
          format: date
          type: string
        rewardPoints:
          example: 5030
          format: int32
          type: integer
      type: object
      xml:
        name: customer
