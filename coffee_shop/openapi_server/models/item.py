# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, name=None, price=None):  # noqa: E501
        """Item - a model defined in OpenAPI

        :param uid: The uid of this Item.  # noqa: E501
        :type uid: int
        :param name: The name of this Item.  # noqa: E501
        :type name: str
        :param price: The price of this Item.  # noqa: E501
        :type price: float
        """
        self.openapi_types = {
            'uid': int,
            'name': str,
            'price': float
        }

        self.attribute_map = {
            'uid': 'uid',
            'name': 'name',
            'price': 'price'
        }

        self._uid = uid
        self._name = name
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self):
        """Gets the uid of this Item.


        :return: The uid of this Item.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Item.


        :param uid: The uid of this Item.
        :type uid: int
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Item.


        :return: The price of this Item.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item.


        :param price: The price of this Item.
        :type price: float
        """

        self._price = price
