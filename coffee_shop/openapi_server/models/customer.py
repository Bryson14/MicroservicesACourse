# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, name=None, birthday=None, reward_points=None):  # noqa: E501
        """Customer - a model defined in OpenAPI

        :param uid: The uid of this Customer.  # noqa: E501
        :type uid: int
        :param name: The name of this Customer.  # noqa: E501
        :type name: str
        :param birthday: The birthday of this Customer.  # noqa: E501
        :type birthday: date
        :param reward_points: The reward_points of this Customer.  # noqa: E501
        :type reward_points: int
        """
        self.openapi_types = {
            'uid': int,
            'name': str,
            'birthday': date,
            'reward_points': int
        }

        self.attribute_map = {
            'uid': 'uid',
            'name': 'name',
            'birthday': 'birthday',
            'reward_points': 'rewardPoints'
        }

        self._uid = uid
        self._name = name
        self._birthday = birthday
        self._reward_points = reward_points

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self):
        """Gets the uid of this Customer.


        :return: The uid of this Customer.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Customer.


        :param uid: The uid of this Customer.
        :type uid: int
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this Customer.


        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.


        :param name: The name of this Customer.
        :type name: str
        """

        self._name = name

    @property
    def birthday(self):
        """Gets the birthday of this Customer.


        :return: The birthday of this Customer.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Customer.


        :param birthday: The birthday of this Customer.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def reward_points(self):
        """Gets the reward_points of this Customer.


        :return: The reward_points of this Customer.
        :rtype: int
        """
        return self._reward_points

    @reward_points.setter
    def reward_points(self, reward_points):
        """Sets the reward_points of this Customer.


        :param reward_points: The reward_points of this Customer.
        :type reward_points: int
        """

        self._reward_points = reward_points
